// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String
  name              String
  bio               String?          // 사용자 소개
  location          String?          // 위치 정보
  website           String?          // 웹사이트 URL
  socialLinks       Json?            // 소셜 링크 (instagram, twitter 등)
  role              String           @default("USER")
  profileImageUrl   String?          // 프로필 사진 S3 링크 (profileImage)
  achievements      Json?            // 업적 배열
  preferences       Json?            // 사용자 설정 (theme, notifications 등)
  auraBalance       Int              @default(0) // 현재 aura 잔액
  totalAuraEarned   Int              @default(0) // 총 획득한 aura (통계용)

  posts             Post[]           // 작성한 게시글
  bookmarks         Bookmark[]       // 저장한 게시글
  refreshTokens     RefreshToken[]
  collections       Collection[]     // 내 컬렉션들
  taggedPosts       PostFriend[]     // 태그된 게시글들
  likes             PostLike[]
  exposures         PostExposure[]
  views             PostView[]
  comments          Comment[]
  commentMentions   CommentMention[]
  auraTransactions  AuraTransaction[] // aura 거래 내역
  dailyProgress     UserDailyProgress[] // 일일 퀘스트 진행도

  // 팔로우/팔로잉
  followers         Follow[]         @relation("user_following", fields: [], references: [])
  followings        Follow[]         @relation("user_follower", fields: [], references: [])

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(512)
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  createdAt DateTime @default(now())
}

model Post {
  id           Int           @id @default(autoincrement())
  title        String        // 게시글 제목
  description  String?       // 게시글 설명
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  collection   Collection?   @relation(fields: [collectionId], references: [id])
  collectionId Int?          // 컬렉션 ID (선택사항)
  isPrivate    Boolean       @default(false) // 비공개 여부
  effect       Json?         // 이펙트 정보 (holoCard 등)
  viewCount    Int           @default(0)     // 조회수
  deletedAt    DateTime?                     // 소프트 삭제 시각

  photos       Photo[]       // 사진 세트
  tags         PostTag[]
  bookmarks    Bookmark[]
  taggedFriends PostFriend[] // 태그된 친구들
  likes        PostLike[]
  exposures    PostExposure[]
  views        PostView[]
  comments     Comment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
// 댓글
model Comment {
  id        Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  content   String
  edited    Boolean   @default(false)
  deletedAt DateTime?

  mentions  CommentMention[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// 댓글 내 멘션 정보(태그된 사용자)
model CommentMention {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  // 향후 클라이언트 하이라이트를 위한 위치/길이 정보 확장 가능
  // start   Int?
  // length  Int?

  createdAt DateTime @default(now())

  @@id([commentId, userId])
}

model Photo {
  id            Int      @id @default(autoincrement())
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int

  // S3에 저장된 URL (원본, 배경, 전경)
  original      String   // 원본 이미지
  background    String   // 배경 이미지
  foreground    String   // 전경 이미지
  thumbnail     String  // 썸네일 이미지

  createdAt     DateTime @default(now())
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  color     String    @default("blue") // 태그 색상

  posts     PostTag[]

  createdAt DateTime  @default(now())
}

// 게시글-태그 N:M 조인
model PostTag {
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  tag     Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   Int

  @@id([postId, tagId])
}

// 사용자의 게시글 저장(북마크)
model Bookmark {
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

// 사용자 팔로우 관계
model Follow {
  follower   User @relation("user_follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  following  User @relation("user_following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  createdAt  DateTime @default(now())

  @@id([followerId, followingId])
}

// 컬렉션 모델
model Collection {
  id          Int      @id @default(autoincrement())
  name        String   // 컬렉션 이름
  description String?  // 컬렉션 설명
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int      // 컬렉션 소유자
  isPrivate   Boolean  @default(false) // 비공개 여부

  posts       Post[]   // 컬렉션에 속한 게시글들

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 게시글에 태그된 친구들
model PostFriend {
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int

  createdAt DateTime @default(now())

  @@id([postId, userId])
}

// 게시글 좋아요
model PostLike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@map("post_likes")
}

// 피드 노출 로그 (사용자에게 노출된 기록)
model PostExposure {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

// 상세 열람 로그 (사용자가 실제로 본 기록)
model PostView {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

// 일일 퀘스트 정의
model DailyQuest {
  id           Int                  @id @default(autoincrement())
  type         String               @unique // "POST_CREATE", "COMMENT_CREATE", "DAILY_LOGIN", "LIKE_GIVE"
  name         String               // 퀘스트 이름
  description  String               // 퀘스트 설명
  maxCount     Int                  // 일일 최대 완료 횟수 (예: 글쓰기 3회, 댓글 5회)
  baseReward   Int                  // 기본 보상 (스케일링 전)
  isActive     Boolean              @default(true) // 활성화 여부
  
  userProgress UserDailyProgress[]  // 사용자별 진행도
  
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

// 사용자별 일일 퀘스트 진행도
model UserDailyProgress {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  quest          DailyQuest  @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId        Int
  currentCount   Int         @default(0) // 현재 완료 횟수
  rewardsReceived Int        @default(0) // 받은 보상 횟수 (개별 보상 추적용)
  lastRewardAt   DateTime?   // 마지막 보상 받은 시간
  date           DateTime    @db.Date // 해당 날짜 (매일 초기화용)
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  @@unique([userId, questId, date]) // 유저, 퀘스트, 날짜별 유일성
  @@index([date]) // 날짜별 조회 최적화
}

// Aura 거래 내역 (포인트 적립/차감/거래 로그)
model AuraTransaction {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  amount       Int      // 적립/차감 금액 (양수: 적립, 음수: 차감)
  balanceAfter Int      // 거래 후 잔액
  type         String   // "QUEST_REWARD", "TRANSFER_SEND", "TRANSFER_RECEIVE", "ADMIN"
  description  String?  // 거래 설명
  
  // 퀘스트 관련 (퀘스트 보상인 경우)
  questId      Int?     // 관련 퀘스트 ID
  
  // P2P 거래 관련 (유저간 거래인 경우)
  fromUserId   Int?     // 보내는 사용자 (거래 시)
  toUserId     Int?     // 받는 사용자 (거래 시)
  transferId   String?  // 거래 추적용 고유 ID
  
  // 연관 엔티티 (활동 기반 보상인 경우)
  relatedPostId    Int? // 게시글 관련
  relatedCommentId Int? // 댓글 관련
  
  createdAt    DateTime @default(now())
  
  @@index([userId, createdAt]) // 사용자별 거래 내역 조회 최적화
  @@index([transferId]) // 거래 추적 최적화
}

// Aura 보상 스케일링 통계 (일일/월별 평균 계산용)
model AuraStats {
  id              Int      @id @default(autoincrement())
  date            DateTime @db.Date // 통계 날짜
  period          String   // "DAILY" | "MONTHLY"
  totalUsers      Int      // 총 활성 사용자 수
  totalEarned     Int      // 총 획득 aura
  avgEarnPerUser  Float    // 사용자당 평균 획득량
  scalingFactor   Float    @default(1.0) // 다음날/다음달 적용할 스케일링 팩터
  
  createdAt       DateTime @default(now())
  
  @@unique([date, period]) // 날짜와 기간별 유일성
  @@index([date, period]) // 조회 최적화
}
